/*
363. Max Sum of Rectangle No Larger Than K

Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.

It is guaranteed that there will be a rectangle with a sum no larger than k.

 

Example 1:


Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).
Example 2:

Input: matrix = [[2,2,-1]], k = 3
Output: 3
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-100 <= matrix[i][j] <= 100
-105 <= k <= 105
*/

/**
 * @param {number[][]} matrix
 * @param {number} k
 * @return {number}
 */
 var closestSubSumSubmatrix = function(matrix, k) {
    
    const runningSum = new Array(matrix[0].length).fill(0);

    let closestSum = - Infinity, firstPass = true;

    for(let up = 0; up < matrix.length; up++) {

       for(let down = up; down < matrix.length; down++) {

        if(firstPass && down > 0) {
            for(let j = 0; j < matrix[0].length; j++) {
                matrix[down][j] += matrix[down - 1][j];
            }            
        }

        let currSum = -Infinity;

         for(let j = 0; j < matrix[0].length; j++) {
             runningSum[j] = matrix[down][j] - (up === down ? 0 : matrix[up][j]);
         }

         let maxSubSum = maxSubArray(runningSum);

         if(maxSubSum <= closestSum) continue;

         currSum = closestSubSum(runningSum, k);
         if(currSum === k) return k;
         if(currSum < k) closestSum = Math.max(closestSum, currSum);
       }

       firstPass = false;
    }

   // console.table(matrix);

    return closestSum;
};

const closestSubSum = (arr, k) => {

    let closest = -Infinity;

    for(let i = 0; i < arr.length; i++) {

        if(arr[i] === k) return k;
        if(arr[i] < k) closest = Math.max(closest, arr[i]);

        arr[i] += i > 0 ? arr[i - 1] : 0;
    

        for(let j = 0; j <= i; j++) {
          const subSum = arr[i] - (i === j ? 0 : arr[j]);
          if(subSum === k) return k;
          if(subSum < k) closest = Math.max(closest, subSum);           
        }
    }

    return closest;
};

var maxSubArray = function(nums) {
    //kadane`s
     if(nums.length === 0) return (- Infinity)
 
     let max = 0
     let gMax = - Infinity
 
     for (let i = 0; i < nums.length; i++) {
          max = Math.max(nums[i], max + nums[i])
          gMax = Math.max(gMax, max)
      }
    return  gMax
 };

let matrix = [[1,0,1],
          [0,-2,3]]; 
let k = 2;

matrix = [[5,0,-2]], k = 3;

matrix = [[5,-4,-3,4],
          [-3,-4,4,5],
          [5,1,5,-4]];
 k = 10;

 matrix = [[2,2,-1]], k = 3;

 matrix = [[10,57,2,-36,-91,10,-72,-12,49,1,-99,-4,-74,-5,-72,-51,-95,-71,29,-25,55,-49,96,-65,77,-37,41,-7,-81,5,49,90],
           [-45,78,-22,-93,-78,-36,-70,-2,-13,-33,0,57,-55,83,99,-5,-37,47,-77,-14,20,10,34,-53,41,-51,-67,91,48,63,69,93],
           [-13,-73,-38,-41,-11,-38,-25,60,87,12,0,38,89,51,34,-48,58,5,19,-1,27,25,75,-45,51,89,21,74,-42,-80,-82,78],
           [-40,-61,22,12,-49,70,-91,26,52,19,37,96,30,83,59,-18,-98,-1,-72,31,-38,100,22,24,-55,81,69,64,-41,-82,-79,94],
           [68,28,71,9,79,86,82,7,-61,100,-85,-21,14,-3,-61,100,-52,32,-36,96,-18,-39,45,5,-54,73,-72,86,4,-1,5,53],
           [-88,-14,-28,-78,-47,54,29,-38,60,-76,-92,2,-57,-46,26,-47,19,-35,71,1,-26,-79,-84,-59,82,-23,36,39,9,-83,-79,-89],
           [-12,-44,78,-38,38,17,19,89,-68,-67,-8,-52,-37,-53,-47,-100,65,-50,61,-64,100,-68,-44,-13,60,70,12,-49,-33,-39,12,-10],
           [2,15,-95,38,83,-22,69,-96,-16,-29,96,-72,-59,97,-5,-21,-93,-76,-63,-91,84,93,11,61,50,-35,87,-80,95,-5,16,-41],
           [79,-99,84,79,-32,82,53,-89,-28,-18,95,-37,57,77,36,34,9,-80,-27,-99,98,97,-97,-51,-62,95,-100,39,-36,-16,91,-21],
           [-63,-59,100,32,30,-13,-89,-75,-11,16,57,59,92,-29,21,66,-95,-16,-83,-45,-49,88,-10,17,-80,9,92,-96,-54,40,-54,11],
           [79,-55,16,-97,-89,67,-50,92,88,-71,29,75,-84,16,53,-53,86,66,15,16,4,-79,-34,80,92,-10,-4,-24,23,-64,-19,95],
           [-66,90,62,51,32,-77,7,-7,5,-7,73,-25,15,70,72,41,-44,-100,57,-49,76,-76,-4,-53,-53,-85,-59,28,-34,-48,77,47],
           [25,-98,52,-25,37,57,-82,79,-32,-23,-3,35,-1,-73,-49,-57,4,-36,-65,50,86,23,96,-50,30,-44,4,-4,-27,-6,70,-67],
           [96,-84,28,-47,9,77,72,-37,-44,76,3,-79,-76,-43,77,-59,-9,55,11,86,33,76,-34,-99,-70,0,-12,26,11,-38,31,-3],
           [-68,-70,90,49,-9,-22,25,3,-56,34,9,-44,1,38,87,58,-21,-38,4,96,-66,65,33,11,69,-35,17,-13,2,37,35,-19],
           [-60,40,86,-49,-17,5,62,20,-95,-13,-92,-95,61,-22,99,34,-70,49,-96,21,85,6,18,40,-37,97,65,13,0,-12,97,-51],
           [28,94,43,-50,48,-72,51,-11,-40,-16,-84,-98,75,-30,91,25,-63,-18,21,-55,-76,0,81,-58,39,4,72,50,-28,-46,-44,60],
           [38,58,45,49,84,53,-53,51,32,28,-38,63,17,-94,79,-83,-59,-32,-77,-69,3,38,-79,4,-61,4,44,-32,-25,28,30,87],
           [40,24,11,-75,85,-10,25,-54,-60,-14,59,-4,24,-36,100,-58,75,66,30,23,69,41,-35,63,-2,-43,-40,-6,-58,91,-94,-11],
           [91,-32,-89,-35,-66,-17,-8,-26,91,-5,-99,-55,55,36,57,11,-12,-55,31,81,-4,-79,40,86,-49,55,96,3,-83,-73,86,-54],
           [-3,47,74,-39,-26,13,65,-53,-59,42,80,-7,-46,-25,93,35,-1,95,-98,-99,11,30,3,-82,13,1,14,95,-73,41,-36,58],
           [-59,46,84,18,-16,19,-70,98,1,-56,-12,73,84,86,-72,84,48,33,95,29,50,12,-62,10,-42,20,-3,-62,7,6,-6,-84],
           [-86,93,80,-74,33,-78,28,33,-67,43,-31,55,80,49,20,56,-44,79,94,-19,10,87,-76,11,-70,-87,89,23,100,-67,-19,-63],
           [-94,-33,27,-73,-84,-7,-44,18,-47,42,45,-84,95,100,23,-5,-34,-18,-62,-69,19,66,-93,-86,26,6,76,34,9,-72,19,10],
           [44,79,59,28,43,10,78,50,33,-56,35,92,91,-30,44,-64,-32,10,-89,87,2,-30,80,-30,59,-90,81,61,-85,-24,-41,-30],
           [-22,63,9,64,49,72,16,-40,-74,-33,-30,-36,24,-34,-59,-68,-43,-9,-99,83,-82,39,0,-76,28,60,-36,98,73,-36,-29,-32],
           [68,54,-55,-98,-4,-21,84,72,-2,-53,56,78,-52,58,-17,32,83,71,-63,17,30,51,-91,29,37,-96,96,-88,-15,-96,12,85],
           [-83,-49,-42,-94,99,-75,93,-51,37,-63,-46,72,-15,54,82,66,65,41,-96,56,100,67,-68,65,55,80,-82,28,-18,-23,-16,-34],
           [3,-19,-20,60,57,62,-76,97,-71,26,68,-25,-79,30,10,-72,71,82,-34,14,68,-46,95,-82,-4,77,64,-65,-93,-81,63,72],
           [-77,38,-53,61,-31,-28,-23,-8,-67,36,-76,-7,-54,67,49,-60,-39,20,-19,-27,32,-53,69,94,16,-80,82,99,-38,-48,-1,34],
           [-34,78,40,76,-95,-61,42,75,-30,64,-70,4,67,78,-75,86,24,-44,-40,15,-80,17,-28,51,72,-39,66,82,-49,29,39,-69],
           [-77,-91,-88,-26,-98,-94,46,86,91,77,36,6,31,27,6,45,71,2,50,-49,7,-8,19,-58,78,-52,-65,-60,-24,74,-81,42],
           [9,1,26,-11,-100,49,-10,-47,1,-47,-27,44,91,38,58,-77,-49,-72,99,73,47,13,-67,-4,52,-38,-36,-96,34,77,12,-85],
           [-85,23,42,-55,32,8,-1,10,-53,79,71,85,58,-24,54,-63,2,-57,-72,27,8,85,73,-75,83,95,-28,43,-78,-8,43,9],
           [-97,48,-22,-8,-57,-46,7,-40,13,50,59,-92,67,-60,1,40,15,69,15,82,-93,-26,-24,96,27,-5,94,93,47,54,32,22]];
k = 9222;

//console.table(matrix);
console.log(closestSubSumSubmatrix(matrix, k));

